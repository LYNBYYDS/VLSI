$date
  Thu Oct 13 18:58:20 2022
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 32 ! op1[31:0] $end
$var reg 32 " op2[31:0] $end
$var reg 1 # cin $end
$var reg 2 $ cmd[1:0] $end
$var reg 32 % res[31:0] $end
$var reg 1 & cout $end
$var reg 1 ' z $end
$var reg 1 ( n $end
$var reg 1 ) v $end
$var reg 1 * vdd $end
$var reg 1 + vss $end
$scope module test $end
$var reg 32 , op1[31:0] $end
$var reg 32 - op2[31:0] $end
$var reg 1 . cin $end
$var reg 2 / cmd[1:0] $end
$var reg 32 0 res[31:0] $end
$var reg 1 1 cout $end
$var reg 1 2 z $end
$var reg 1 3 n $end
$var reg 1 4 v $end
$var reg 1 5 vdd $end
$var reg 1 6 vss $end
$var reg 32 7 res_signal[31:0] $end
$var reg 32 8 add_sum[31:0] $end
$var reg 1 9 add_cout $end
$scope module add32 $end
$var reg 32 : a[31:0] $end
$var reg 32 ; b[31:0] $end
$var reg 1 < cin $end
$var reg 1 = c $end
$var reg 32 > s[31:0] $end
$var reg 1 ? c_signal $end
$scope module part_0 $end
$var reg 16 @ a[15:0] $end
$var reg 16 A b[15:0] $end
$var reg 1 B cin $end
$var reg 1 C c $end
$var reg 16 D s[15:0] $end
$var reg 3 E c_signal[2:0] $end
$scope module hw_0 $end
$var reg 4 F a[3:0] $end
$var reg 4 G b[3:0] $end
$var reg 1 H cin $end
$var reg 1 I c $end
$var reg 4 J s[3:0] $end
$var reg 3 K c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 L a $end
$var reg 1 M b $end
$var reg 1 N cin $end
$var reg 1 O c $end
$var reg 1 P s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 Q a $end
$var reg 1 R b $end
$var reg 1 S cin $end
$var reg 1 T c $end
$var reg 1 U s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 V a $end
$var reg 1 W b $end
$var reg 1 X cin $end
$var reg 1 Y c $end
$var reg 1 Z s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 [ a $end
$var reg 1 \ b $end
$var reg 1 ] cin $end
$var reg 1 ^ c $end
$var reg 1 _ s $end
$upscope $end
$upscope $end
$scope module hw_1 $end
$var reg 4 ` a[3:0] $end
$var reg 4 a b[3:0] $end
$var reg 1 b cin $end
$var reg 1 c c $end
$var reg 4 d s[3:0] $end
$var reg 3 e c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 f a $end
$var reg 1 g b $end
$var reg 1 h cin $end
$var reg 1 i c $end
$var reg 1 j s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 k a $end
$var reg 1 l b $end
$var reg 1 m cin $end
$var reg 1 n c $end
$var reg 1 o s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 p a $end
$var reg 1 q b $end
$var reg 1 r cin $end
$var reg 1 s c $end
$var reg 1 t s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 u a $end
$var reg 1 v b $end
$var reg 1 w cin $end
$var reg 1 x c $end
$var reg 1 y s $end
$upscope $end
$upscope $end
$scope module hw_2 $end
$var reg 4 z a[3:0] $end
$var reg 4 { b[3:0] $end
$var reg 1 | cin $end
$var reg 1 } c $end
$var reg 4 !" s[3:0] $end
$var reg 3 "" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 #" a $end
$var reg 1 $" b $end
$var reg 1 %" cin $end
$var reg 1 &" c $end
$var reg 1 '" s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 (" a $end
$var reg 1 )" b $end
$var reg 1 *" cin $end
$var reg 1 +" c $end
$var reg 1 ," s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 -" a $end
$var reg 1 ." b $end
$var reg 1 /" cin $end
$var reg 1 0" c $end
$var reg 1 1" s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 2" a $end
$var reg 1 3" b $end
$var reg 1 4" cin $end
$var reg 1 5" c $end
$var reg 1 6" s $end
$upscope $end
$upscope $end
$scope module hw_3 $end
$var reg 4 7" a[3:0] $end
$var reg 4 8" b[3:0] $end
$var reg 1 9" cin $end
$var reg 1 :" c $end
$var reg 4 ;" s[3:0] $end
$var reg 3 <" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 =" a $end
$var reg 1 >" b $end
$var reg 1 ?" cin $end
$var reg 1 @" c $end
$var reg 1 A" s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 B" a $end
$var reg 1 C" b $end
$var reg 1 D" cin $end
$var reg 1 E" c $end
$var reg 1 F" s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 G" a $end
$var reg 1 H" b $end
$var reg 1 I" cin $end
$var reg 1 J" c $end
$var reg 1 K" s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 L" a $end
$var reg 1 M" b $end
$var reg 1 N" cin $end
$var reg 1 O" c $end
$var reg 1 P" s $end
$upscope $end
$upscope $end
$upscope $end
$scope module part_1 $end
$var reg 16 Q" a[15:0] $end
$var reg 16 R" b[15:0] $end
$var reg 1 S" cin $end
$var reg 1 T" c $end
$var reg 16 U" s[15:0] $end
$var reg 3 V" c_signal[2:0] $end
$scope module hw_0 $end
$var reg 4 W" a[3:0] $end
$var reg 4 X" b[3:0] $end
$var reg 1 Y" cin $end
$var reg 1 Z" c $end
$var reg 4 [" s[3:0] $end
$var reg 3 \" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 ]" a $end
$var reg 1 ^" b $end
$var reg 1 _" cin $end
$var reg 1 `" c $end
$var reg 1 a" s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 b" a $end
$var reg 1 c" b $end
$var reg 1 d" cin $end
$var reg 1 e" c $end
$var reg 1 f" s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 g" a $end
$var reg 1 h" b $end
$var reg 1 i" cin $end
$var reg 1 j" c $end
$var reg 1 k" s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 l" a $end
$var reg 1 m" b $end
$var reg 1 n" cin $end
$var reg 1 o" c $end
$var reg 1 p" s $end
$upscope $end
$upscope $end
$scope module hw_1 $end
$var reg 4 q" a[3:0] $end
$var reg 4 r" b[3:0] $end
$var reg 1 s" cin $end
$var reg 1 t" c $end
$var reg 4 u" s[3:0] $end
$var reg 3 v" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 w" a $end
$var reg 1 x" b $end
$var reg 1 y" cin $end
$var reg 1 z" c $end
$var reg 1 {" s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 |" a $end
$var reg 1 }" b $end
$var reg 1 !# cin $end
$var reg 1 "# c $end
$var reg 1 ## s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 $# a $end
$var reg 1 %# b $end
$var reg 1 &# cin $end
$var reg 1 '# c $end
$var reg 1 (# s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 )# a $end
$var reg 1 *# b $end
$var reg 1 +# cin $end
$var reg 1 ,# c $end
$var reg 1 -# s $end
$upscope $end
$upscope $end
$scope module hw_2 $end
$var reg 4 .# a[3:0] $end
$var reg 4 /# b[3:0] $end
$var reg 1 0# cin $end
$var reg 1 1# c $end
$var reg 4 2# s[3:0] $end
$var reg 3 3# c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 4# a $end
$var reg 1 5# b $end
$var reg 1 6# cin $end
$var reg 1 7# c $end
$var reg 1 8# s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 9# a $end
$var reg 1 :# b $end
$var reg 1 ;# cin $end
$var reg 1 <# c $end
$var reg 1 =# s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 ># a $end
$var reg 1 ?# b $end
$var reg 1 @# cin $end
$var reg 1 A# c $end
$var reg 1 B# s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 C# a $end
$var reg 1 D# b $end
$var reg 1 E# cin $end
$var reg 1 F# c $end
$var reg 1 G# s $end
$upscope $end
$upscope $end
$scope module hw_3 $end
$var reg 4 H# a[3:0] $end
$var reg 4 I# b[3:0] $end
$var reg 1 J# cin $end
$var reg 1 K# c $end
$var reg 4 L# s[3:0] $end
$var reg 3 M# c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 N# a $end
$var reg 1 O# b $end
$var reg 1 P# cin $end
$var reg 1 Q# c $end
$var reg 1 R# s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 S# a $end
$var reg 1 T# b $end
$var reg 1 U# cin $end
$var reg 1 V# c $end
$var reg 1 W# s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 X# a $end
$var reg 1 Y# b $end
$var reg 1 Z# cin $end
$var reg 1 [# c $end
$var reg 1 \# s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 ]# a $end
$var reg 1 ^# b $end
$var reg 1 _# cin $end
$var reg 1 `# c $end
$var reg 1 a# s $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00000000000000000000000000000000 !
b00000000000000000000000000000000 "
0#
bUU $
b00000000000000000000000000000000 %
0&
1'
0(
0)
1*
0+
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
0.
bUU /
b00000000000000000000000000000000 0
01
12
03
04
15
06
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
09
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
0<
0=
b00000000000000000000000000000000 >
0?
b0000000000000000 @
b0000000000000000 A
0B
0C
b0000000000000000 D
b000 E
b0000 F
b0000 G
0H
0I
b0000 J
b000 K
0L
0M
0N
0O
0P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
b0000 `
b0000 a
0b
0c
b0000 d
b000 e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
b0000 z
b0000 {
0|
0}
b0000 !"
b000 ""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
b0000 7"
b0000 8"
09"
0:"
b0000 ;"
b000 <"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
b0000000000000000 Q"
b0000000000000000 R"
0S"
0T"
b0000000000000000 U"
b000 V"
b0000 W"
b0000 X"
0Y"
0Z"
b0000 ["
b000 \"
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0k"
0l"
0m"
0n"
0o"
0p"
b0000 q"
b0000 r"
0s"
0t"
b0000 u"
b000 v"
0w"
0x"
0y"
0z"
0{"
0|"
0}"
0!#
0"#
0##
0$#
0%#
0&#
0'#
0(#
0)#
0*#
0+#
0,#
0-#
b0000 .#
b0000 /#
00#
01#
b0000 2#
b000 3#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0=#
0>#
0?#
0@#
0A#
0B#
0C#
0D#
0E#
0F#
0G#
b0000 H#
b0000 I#
0J#
0K#
b0000 L#
b000 M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0]#
0^#
0_#
0`#
0a#
#20000000
b00000001000000100000001100000001 !
b00000000000000000000000000000001 "
b00 $
b00000001000000100000001100000010 %
0'
b00000001000000100000001100000001 ,
b00000000000000000000000000000001 -
b00 /
b00000001000000100000001100000010 0
02
b00000001000000100000001100000000 7
b00000001000000100000001100000010 8
b00000001000000100000001100000001 :
b00000000000000000000000000000001 ;
b00000001000000100000001100000010 >
b0000001100000001 @
b0000000000000001 A
b0000001100000010 D
b0001 F
b0001 G
b0010 J
b001 K
1L
1M
1O
1S
1U
b0011 z
b0011 !"
1#"
1'"
1("
1,"
b0000000100000010 Q"
b0000000100000010 U"
b0010 W"
b0010 ["
1b"
1f"
b0001 .#
b0001 2#
14#
18#
#30000000
b01 $
b00000000000000000000000000000001 %
b01 /
b00000000000000000000000000000001 0
b00000000000000000000000000000001 7
#40000000
b10 $
b00000001000000100000001100000001 %
b10 /
b00000001000000100000001100000001 0
b00000001000000100000001100000001 7
#50000000
b11 $
b00000001000000100000001100000000 %
b11 /
b00000001000000100000001100000000 0
b00000001000000100000001100000000 7
#60000000
b00 $
b00000001000000100000001100000010 %
b00 /
b00000001000000100000001100000010 0
