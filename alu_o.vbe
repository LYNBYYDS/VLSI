-- VHDL data flow description generated from `alu_o`
--		date : Thu Dec  8 17:52:44 2022


-- Entity Declaration

ENTITY alu_o IS
  PORT (
  add_sum : in bit_vector(31 DOWNTO 0) ;	-- add_sum
  add_cout : in BIT;	-- add_cout
  vss : in BIT;	-- vss
  vdd : in BIT;	-- vdd
  v : out BIT;	-- v
  n : out BIT;	-- n
  z : out BIT;	-- z
  cout : out BIT;	-- cout
  res : out bit_vector(31 DOWNTO 0) ;	-- res
  cmd : in bit_vector(1 DOWNTO 0) ;	-- cmd
  op2 : in bit_vector(31 DOWNTO 0) ;	-- op2
  op1 : in bit_vector(31 DOWNTO 0) 	-- op1
  );
END alu_o;


-- Architecture Declaration

ARCHITECTURE behaviour_data_flow OF alu_o IS
  SIGNAL res_signal_31 : BIT;		-- res_signal_31
  SIGNAL res_signal_30 : BIT;		-- res_signal_30
  SIGNAL res_signal_29 : BIT;		-- res_signal_29
  SIGNAL res_signal_28 : BIT;		-- res_signal_28
  SIGNAL res_signal_26 : BIT;		-- res_signal_26
  SIGNAL res_signal_25 : BIT;		-- res_signal_25
  SIGNAL res_signal_24 : BIT;		-- res_signal_24
  SIGNAL res_signal_23 : BIT;		-- res_signal_23
  SIGNAL res_signal_22 : BIT;		-- res_signal_22
  SIGNAL res_signal_21 : BIT;		-- res_signal_21
  SIGNAL res_signal_20 : BIT;		-- res_signal_20
  SIGNAL res_signal_19 : BIT;		-- res_signal_19
  SIGNAL res_signal_18 : BIT;		-- res_signal_18
  SIGNAL res_signal_17 : BIT;		-- res_signal_17
  SIGNAL res_signal_16 : BIT;		-- res_signal_16
  SIGNAL res_signal_15 : BIT;		-- res_signal_15
  SIGNAL res_signal_14 : BIT;		-- res_signal_14
  SIGNAL res_signal_13 : BIT;		-- res_signal_13
  SIGNAL res_signal_12 : BIT;		-- res_signal_12
  SIGNAL res_signal_11 : BIT;		-- res_signal_11
  SIGNAL res_signal_10 : BIT;		-- res_signal_10
  SIGNAL res_signal_9 : BIT;		-- res_signal_9
  SIGNAL res_signal_8 : BIT;		-- res_signal_8
  SIGNAL res_signal_7 : BIT;		-- res_signal_7
  SIGNAL res_signal_6 : BIT;		-- res_signal_6
  SIGNAL res_signal_5 : BIT;		-- res_signal_5
  SIGNAL res_signal_4 : BIT;		-- res_signal_4
  SIGNAL res_signal_3 : BIT;		-- res_signal_3
  SIGNAL res_signal_2 : BIT;		-- res_signal_2
  SIGNAL res_signal_1 : BIT;		-- res_signal_1
  SIGNAL res_signal_0 : BIT;		-- res_signal_0
  SIGNAL aux0 : BIT;		-- aux0
  SIGNAL aux1 : BIT;		-- aux1
  SIGNAL aux2 : BIT;		-- aux2
  SIGNAL aux3 : BIT;		-- aux3
  SIGNAL aux4 : BIT;		-- aux4
  SIGNAL aux5 : BIT;		-- aux5

BEGIN
  aux5 <= (cmd(0) AND NOT(cmd(1)));
  aux4 <= (aux0 AND add_sum(31));
  aux3 <= NOT(NOT(aux0) OR add_sum(31));
  aux2 <= NOT((((op1(27) XOR op2(27)) AND NOT(cmd(0))) OR (
(op1(27) XOR (op2(27) AND cmd(0))) AND cmd(1)) OR 
(op1(27) AND op2(27) AND aux5)) OR aux0);
  aux1 <= (op1(31) AND op2(31));
  aux0 <= (NOT(cmd(0)) AND NOT(cmd(1)));
  res_signal_0 <= (((op1(0) XOR op2(0)) AND NOT(cmd(0))) OR ((
op1(0) XOR (op2(0) AND cmd(0))) AND cmd(1)) OR (op1(0) 
AND op2(0) AND aux5));
  res_signal_1 <= (((op1(1) XOR op2(1)) AND NOT(cmd(0))) OR ((
op1(1) XOR (op2(1) AND cmd(0))) AND cmd(1)) OR (op1(1) 
AND op2(1) AND aux5));
  res_signal_2 <= (((op1(2) XOR op2(2)) AND NOT(cmd(0))) OR ((
op1(2) XOR (op2(2) AND cmd(0))) AND cmd(1)) OR (op1(2) 
AND op2(2) AND aux5));
  res_signal_3 <= (((op1(3) XOR op2(3)) AND NOT(cmd(0))) OR ((
op1(3) XOR (op2(3) AND cmd(0))) AND cmd(1)) OR (op1(3) 
AND op2(3) AND aux5));
  res_signal_4 <= (((op1(4) XOR op2(4)) AND NOT(cmd(0))) OR ((
op1(4) XOR (op2(4) AND cmd(0))) AND cmd(1)) OR (op1(4) 
AND op2(4) AND aux5));
  res_signal_5 <= (((op1(5) XOR op2(5)) AND NOT(cmd(0))) OR ((
op1(5) XOR (op2(5) AND cmd(0))) AND cmd(1)) OR (op1(5) 
AND op2(5) AND aux5));
  res_signal_6 <= (((op1(6) XOR op2(6)) AND NOT(cmd(0))) OR ((
op1(6) XOR (op2(6) AND cmd(0))) AND cmd(1)) OR (op1(6) 
AND op2(6) AND aux5));
  res_signal_7 <= (((op1(7) XOR op2(7)) AND NOT(cmd(0))) OR ((
op1(7) XOR (op2(7) AND cmd(0))) AND cmd(1)) OR (op1(7) 
AND op2(7) AND aux5));
  res_signal_8 <= (((op1(8) XOR op2(8)) AND NOT(cmd(0))) OR ((
op1(8) XOR (op2(8) AND cmd(0))) AND cmd(1)) OR (op1(8) 
AND op2(8) AND aux5));
  res_signal_9 <= (((op1(9) XOR op2(9)) AND NOT(cmd(0))) OR ((
op1(9) XOR (op2(9) AND cmd(0))) AND cmd(1)) OR (op1(9) 
AND op2(9) AND aux5));
  res_signal_10 <= (((op1(10) XOR op2(10)) AND NOT(cmd(0))) OR ((
op1(10) XOR (op2(10) AND cmd(0))) AND cmd(1)) OR (
op1(10) AND op2(10) AND aux5));
  res_signal_11 <= (((op1(11) XOR op2(11)) AND NOT(cmd(0))) OR ((
op1(11) XOR (op2(11) AND cmd(0))) AND cmd(1)) OR (
op1(11) AND op2(11) AND aux5));
  res_signal_12 <= (((op2(12) XOR op1(12)) AND NOT(cmd(0))) OR ((
op2(12) XOR (op1(12) AND cmd(0))) AND cmd(1)) OR (
op2(12) AND op1(12) AND aux5));
  res_signal_13 <= (((op1(13) XOR op2(13)) AND NOT(cmd(0))) OR ((
op1(13) XOR (op2(13) AND cmd(0))) AND cmd(1)) OR (
op1(13) AND op2(13) AND aux5));
  res_signal_14 <= (((op1(14) XOR op2(14)) AND NOT(cmd(0))) OR ((
op1(14) XOR (op2(14) AND cmd(0))) AND cmd(1)) OR (
op1(14) AND op2(14) AND aux5));
  res_signal_15 <= (((op1(15) XOR op2(15)) AND NOT(cmd(0))) OR ((
op1(15) XOR (op2(15) AND cmd(0))) AND cmd(1)) OR (
op1(15) AND op2(15) AND aux5));
  res_signal_16 <= (((op1(16) XOR op2(16)) AND NOT(cmd(0))) OR ((
op1(16) XOR (op2(16) AND cmd(0))) AND cmd(1)) OR (
op1(16) AND op2(16) AND aux5));
  res_signal_17 <= (((op1(17) XOR op2(17)) AND NOT(cmd(0))) OR ((
op1(17) XOR (op2(17) AND cmd(0))) AND cmd(1)) OR (
op1(17) AND op2(17) AND aux5));
  res_signal_18 <= (((op1(18) XOR op2(18)) AND NOT(cmd(0))) OR ((
op1(18) XOR (op2(18) AND cmd(0))) AND cmd(1)) OR (
op1(18) AND op2(18) AND aux5));
  res_signal_19 <= (((op1(19) XOR op2(19)) AND NOT(cmd(0))) OR ((
op1(19) XOR (op2(19) AND cmd(0))) AND cmd(1)) OR (
op1(19) AND op2(19) AND aux5));
  res_signal_20 <= (((op1(20) XOR op2(20)) AND NOT(cmd(0))) OR ((
op1(20) XOR (op2(20) AND cmd(0))) AND cmd(1)) OR (
op1(20) AND op2(20) AND aux5));
  res_signal_21 <= (((op1(21) XOR op2(21)) AND NOT(cmd(0))) OR ((
op1(21) XOR (op2(21) AND cmd(0))) AND cmd(1)) OR (
op1(21) AND op2(21) AND aux5));
  res_signal_22 <= (((op1(22) XOR op2(22)) AND NOT(cmd(0))) OR ((
op1(22) XOR (op2(22) AND cmd(0))) AND cmd(1)) OR (
op1(22) AND op2(22) AND aux5));
  res_signal_23 <= (((op1(23) XOR op2(23)) AND NOT(cmd(0))) OR ((
op1(23) XOR (op2(23) AND cmd(0))) AND cmd(1)) OR (
op1(23) AND op2(23) AND aux5));
  res_signal_24 <= (((op1(24) XOR op2(24)) AND NOT(cmd(0))) OR ((
op1(24) XOR (op2(24) AND cmd(0))) AND cmd(1)) OR (
op1(24) AND op2(24) AND aux5));
  res_signal_25 <= (((op1(25) XOR op2(25)) AND NOT(cmd(0))) OR ((
op1(25) XOR (op2(25) AND cmd(0))) AND cmd(1)) OR (
op1(25) AND op2(25) AND aux5));
  res_signal_26 <= (((op1(26) XOR op2(26)) AND NOT(cmd(0))) OR ((
op1(26) XOR (op2(26) AND cmd(0))) AND cmd(1)) OR (
op1(26) AND op2(26) AND aux5));
  res_signal_28 <= (((op1(28) XOR op2(28)) AND NOT(cmd(0))) OR ((
op1(28) XOR (op2(28) AND cmd(0))) AND cmd(1)) OR (
op1(28) AND op2(28) AND aux5));
  res_signal_29 <= (((op1(29) XOR op2(29)) AND NOT(cmd(0))) OR ((
op1(29) XOR (op2(29) AND cmd(0))) AND cmd(1)) OR (
op1(29) AND op2(29) AND aux5));
  res_signal_30 <= (((op1(30) XOR op2(30)) AND NOT(cmd(0))) OR ((
op1(30) XOR (op2(30) AND cmd(0))) AND cmd(1)) OR (
op1(30) AND op2(30) AND aux5));
  res_signal_31 <= (((op1(31) XOR op2(31)) AND NOT(cmd(0))) OR ((
op1(31) XOR (op2(31) AND cmd(0))) AND cmd(1)) OR (aux1 
AND aux5));

res (0) <= ((res_signal_0 AND NOT(aux0)) OR (add_sum(0) AND 
aux0));

res (1) <= ((res_signal_1 AND NOT(aux0)) OR (add_sum(1) AND 
aux0));

res (2) <= ((res_signal_2 AND NOT(aux0)) OR (add_sum(2) AND 
aux0));

res (3) <= ((res_signal_3 AND NOT(aux0)) OR (add_sum(3) AND 
aux0));

res (4) <= ((res_signal_4 AND NOT(aux0)) OR (add_sum(4) AND 
aux0));

res (5) <= ((NOT(aux0) OR add_sum(5)) AND (res_signal_5 OR 
aux0));

res (6) <= ((NOT(aux0) OR add_sum(6)) AND (res_signal_6 OR 
aux0));

res (7) <= ((res_signal_7 AND NOT(aux0)) OR (add_sum(7) AND 
aux0));

res (8) <= ((NOT(aux0) OR add_sum(8)) AND (res_signal_8 OR 
aux0));

res (9) <= ((NOT(aux0) OR add_sum(9)) AND (res_signal_9 OR 
aux0));

res (10) <= ((NOT(aux0) OR add_sum(10)) AND (res_signal_10 OR
 aux0));

res (11) <= ((NOT(aux0) OR add_sum(11)) AND (res_signal_11 OR
 aux0));

res (12) <= ((NOT(aux0) OR add_sum(12)) AND (res_signal_12 OR
 aux0));

res (13) <= ((NOT(aux0) OR add_sum(13)) AND (res_signal_13 OR
 aux0));

res (14) <= ((NOT(aux0) OR add_sum(14)) AND (res_signal_14 OR
 aux0));

res (15) <= ((NOT(aux0) OR add_sum(15)) AND (res_signal_15 OR
 aux0));

res (16) <= ((NOT(aux0) OR add_sum(16)) AND (res_signal_16 OR
 aux0));

res (17) <= ((res_signal_17 AND NOT(aux0)) OR (add_sum(17) 
AND aux0));

res (18) <= ((NOT(aux0) OR add_sum(18)) AND (res_signal_18 OR
 aux0));

res (19) <= ((NOT(aux0) OR add_sum(19)) AND (res_signal_19 OR
 aux0));

res (20) <= ((NOT(aux0) OR add_sum(20)) AND (res_signal_20 OR
 aux0));

res (21) <= ((NOT(aux0) OR add_sum(21)) AND (res_signal_21 OR
 aux0));

res (22) <= ((NOT(aux0) OR add_sum(22)) AND (res_signal_22 OR
 aux0));

res (23) <= ((NOT(aux0) OR add_sum(23)) AND (res_signal_23 OR
 aux0));

res (24) <= ((NOT(aux0) OR add_sum(24)) AND (res_signal_24 OR
 aux0));

res (25) <= ((NOT(aux0) OR add_sum(25)) AND (res_signal_25 OR
 aux0));

res (26) <= ((NOT(aux0) OR add_sum(26)) AND (res_signal_26 OR
 aux0));

res (27) <= ((NOT(aux0) OR add_sum(27)) AND NOT(aux2));

res (28) <= ((NOT(aux0) OR add_sum(28)) AND (res_signal_28 OR
 aux0));

res (29) <= ((NOT(aux0) OR add_sum(29)) AND (res_signal_29 OR
 aux0));

res (30) <= ((NOT(aux0) OR add_sum(30)) AND (res_signal_30 OR
 aux0));

res (31) <= (NOT(aux3) AND (res_signal_31 OR aux0));

cout <= (aux0 AND add_cout);

z <= ((NOT(add_sum(4)) AND NOT(add_sum(3)) AND NOT(
add_sum(2)) AND NOT(add_sum(0)) AND NOT(add_sum(7)) AND NOT
(add_sum(1)) AND NOT(add_sum(17)) AND NOT(cmd(0)) 
AND NOT(cmd(1)) AND NOT(add_sum(29)) AND NOT(
add_sum(25)) AND NOT(add_sum(8)) AND NOT(add_sum(14)) AND 
NOT(add_sum(5)) AND NOT(add_sum(22)) AND NOT(
add_sum(12)) AND NOT(add_sum(9)) AND NOT(add_sum(11)) AND 
NOT(add_sum(16)) AND NOT(add_sum(10)) AND NOT(
add_sum(15)) AND NOT(add_sum(30)) AND NOT(add_sum(20)) AND 
NOT(add_sum(27)) AND NOT(add_sum(6)) AND NOT(
add_sum(24)) AND NOT(add_sum(23)) AND NOT(add_sum(18)) AND 
NOT(add_sum(28)) AND NOT(add_sum(21)) AND NOT(
add_sum(13)) AND NOT(add_sum(26)) AND NOT(add_sum(19)) AND 
NOT(add_sum(31))) OR (NOT(res_signal_8) AND NOT(
res_signal_12) AND NOT(res_signal_10) AND NOT(res_signal_5) 
AND NOT(res_signal_11) AND NOT(res_signal_0) AND NOT
(res_signal_9) AND NOT(res_signal_16) AND NOT(
res_signal_1) AND NOT(res_signal_13) AND NOT(res_signal_2) 
AND NOT(res_signal_26) AND NOT(res_signal_6) AND NOT
(res_signal_3) AND NOT(res_signal_28) AND NOT(
res_signal_4) AND NOT(res_signal_7) AND NOT(res_signal_17) 
AND NOT(res_signal_18) AND NOT(res_signal_20) AND 
NOT(res_signal_21) AND NOT(res_signal_15) AND NOT(
res_signal_29) AND NOT(res_signal_19) AND NOT(res_signal_23) 
AND NOT(res_signal_14) AND NOT(res_signal_24) AND 
NOT(res_signal_31) AND NOT(res_signal_22) AND NOT(
res_signal_30) AND NOT(res_signal_25) AND aux2));

n <= aux4;

v <= ((NOT(op1(31)) AND NOT(op2(31)) AND aux4) OR (
aux1 AND aux3));
END;
