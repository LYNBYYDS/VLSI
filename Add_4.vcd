$date
  Wed Oct 12 09:48:56 2022
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 1 ! cin_signal $end
$var reg 1 " c $end
$var reg 4 # s[3:0] $end
$var reg 4 $ a[3:0] $end
$var reg 4 % b[3:0] $end
$scope module test $end
$var reg 4 & a[3:0] $end
$var reg 4 ' b[3:0] $end
$var reg 1 ( cin $end
$var reg 1 ) c $end
$var reg 4 * s[3:0] $end
$var reg 3 + c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 , a $end
$var reg 1 - b $end
$var reg 1 . cin $end
$var reg 1 / c $end
$var reg 1 0 s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 1 a $end
$var reg 1 2 b $end
$var reg 1 3 cin $end
$var reg 1 4 c $end
$var reg 1 5 s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 6 a $end
$var reg 1 7 b $end
$var reg 1 8 cin $end
$var reg 1 9 c $end
$var reg 1 : s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 ; a $end
$var reg 1 < b $end
$var reg 1 = cin $end
$var reg 1 > c $end
$var reg 1 ? s $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
0"
b0000 #
b0000 $
b0000 %
b0000 &
b0000 '
0(
0)
b0000 *
b000 +
0,
0-
0.
0/
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
#20000000
b0010 #
b0001 $
b0001 %
b0001 &
b0001 '
b0010 *
b001 +
1,
1-
1/
13
15
#40000000
b0111 #
b0101 $
b0010 %
b0101 &
b0010 '
b0111 *
b000 +
0-
0/
10
12
03
04
15
16
08
09
1:
0=
0?
#60000000
1"
b1000 #
b1010 $
b1110 %
b1010 &
b1110 '
1)
b1000 *
b110 +
0,
00
11
14
05
06
17
18
19
0:
1;
1<
1=
1>
1?
#80000000
0"
b1100 #
b0111 $
b0101 %
b0111 &
b0101 '
0)
b1100 *
b111 +
1,
1-
1/
02
13
14
05
16
18
1:
0;
0<
0>
